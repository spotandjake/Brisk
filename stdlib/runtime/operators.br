// i32 INFIX Math
@operator('+', 'INFIX');
export const addI32: Function = (a: i32, b: i32): i32 => @wasm.i32.add(a, b);
@operator('-', 'INFIX');
export const subI32: Function = (a: i32, b: i32): i32 => @wasm.i32.sub(a, b);
@operator('*', 'INFIX');
export const mulI32: Function = (a: i32, b: i32): i32 => @wasm.i32.mul(a, b);
@operator('/', 'INFIX');
export const divI32: Function = (a: i32, b: i32): i32 => @wasm.i32.div_s(a, b);
// TODO: I64 INFIX Math
// f32 INFIX Math
@operator('+', 'INFIX');
export const addF32: Function = (a: f32, b: f32): f32 => @wasm.f32.add(a, b);
@operator('-', 'INFIX');
export const subF32: Function = (a: f32, b: f32): f32 => @wasm.f32.sub(a, b);
@operator('*', 'INFIX');
export const mulF32: Function = (a: f32, b: f32): f32 => @wasm.f32.mul(a, b);
@operator('/', 'INFIX');
export const divF32: Function = (a: f32, b: f32): f32 => @wasm.f32.div(a, b);
// TODO: F64 INFIX Math