import wasm print: (String) -> Void from 'env';
// import print from 'env';

// Perform Type Checking
// Verify The Program
// Optimize: Run constant propagation and dead code elimination
// Perform Module Linking
// Add gc instructions
// Port lsp to brisk
// Fix nearley error handler
// Make nearley use a custom lexer
// write a custom parser
// Port lexer and parser to Brisk
// Implement incremental building
// Comments
let f: String = 't';
print(f);
let main: (Number) -> Number = (param: Number): Number => {
  // @disablegc
  // Test Comment
  let str: String = 't';
  let num: Number = -1.111;
  let boolTrue: Boolean = true;
  let boolFalse: Boolean = false;
  print(boolTrue);
  return(2);
};
let p: () -> Void = (): Void => {
  print(f);
};
p();
let call: Number = main(main(1));
let num: Number = 3;
main(num);
// export main;