import wasm print: (String) -> Void from 'env';
// import print from 'env';

// Add support for i64 numbers
// Add support for f64 numbers
// Add debug info to file
// Fix nearley error handler
// Perform Type Checking
// Implement fix for closures campturing themselves
// Add support for Rationals
// Add wasm stack types
// Add a runtime mode that allows us to implement malloc and garbage collection
// Add wasm instructions
  // Memory
    // Briskload(Pointer: i32, offset: i32) -> i32
    // Briskstore(Pointer: i32, offset: i32, data: i32) -> Void
    // Brisksize() -> i32
    // Briskgrow(pages: i32) -> i32
    // _Malloc(Size: i32) -> i32
  // Math
  // Control Flow
// write a malloc in brisk, limit runtime malloc to a quarter of a page, and use brisk malloc when outside of runtime mode.
// Write Unit tests for output
  // Variable representation
  // Closures
  // Parameters
  // Imports
// Add Module Linking: look into wasm-ld
// Add gc instructions
// Verify The Program
// Optimize: Run constant propagation and dead code elimination, along with convert any heap values that do not need to be tagged or passed into stack values and make functions under those circumstances use local calls
// put all known variables and values into memory at innialization
// write a custom parser
// Port lexer and parser to Brisk
// Implement incremental building

// Comments
// let f: String = 'test';
// print(f);
// let main: (Number) -> Number = (param: Number): Number => {
//   // @disablegc
//   // Test Comment
//   let str: String = 'b';
//   let a: Number = 1;
//   let b: Number = -1;
//   let c: Number = 1.1;
//   let d: Number = -1.1;
//   let boolTrue: Boolean = true;
//   let boolFalse: Boolean = false;
//   print(boolTrue);
//   return(2);
// };
// let p: () -> Void = (): Void => {
//   print(f);
// };
// p();
// let a: Number = 1;
// let b: Number = -1;
// let c: Number = -2;
// let d: Number = +1;
// let e: Number= 2147483647;
// let f: Number= 1.1;
// print(a);
// let loop: Function = (body: Function, self: Function): Void => {
//   body();
//   self(body, self);
// };
// loop((): Void => {
//   print(1);
// }, loop);
// let a: String = 'a';
// print(1); //i32
// print(-1);
// print(1.1); //f32
// print(-1.1);
print(9223372036854770000); // i64
// print(-9223372036854770000);
// let loop: Function = (body: Function): Void => {
//   body();
//   loop(body);
// };
// loop((): Void => {
//   print(1);
// });
// main(num);
// export main;