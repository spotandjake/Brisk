import wasm print: (String) -> Void from 'env';
// import print from 'env';

// TODO: Add support for function calls as arguments and var values
// Perform Type Checking
// Verify The Program
// Optimize: Run constant propagation and dead code elimination
// Perform Module Linking
// Add gc instructions
// Port lsp to brisk
// Fix nearley error handler
// Make nearley use a custom lexer
// write a custom parser
// Port lexer and parser to Brisk
// Implement incremental building
// Comments
let f: String = 't';
// let main: (Number, String, String) -> Number = (param: Number, param2: String, param3: String): Number => {
//   @disablegc
//   // Test Comment
//   let str: String = 't';
//   let num: Number = -1.111;
//   let boolTrue: Boolean = true;
//   let boolFalse: Boolean = false;
//   // main(num);
//   return(1);
// };
let p: () -> Void = (): Void => {
  print(f);
};
p();
// let call: Number = main(main(1, 2));

// main((): Void => {
//   @disablegc
// });
// export main;