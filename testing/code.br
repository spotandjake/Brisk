import c from './print.br';
import wasm print: (i32) -> Void from 'env';
print(c);
// import wasm fd_write: (i32, Number, Number, Number) -> Number from 'wasi_unstable';
// import print from 'env';
// Add support for Rationals
// Add raw wasm types that stay on the stack
// Investigate downsides of using i64 over i32 for addresses, and lower integers. the size of i64 isnt much larger, alternativly look into using a single byte to represent the var type, and number type
// Add debug info to file
// Add a runtime mode that allows us to implement malloc and garbage collection
// Add Module Linking
// Add wasm instructions
  // Memory
    // Briskload(Pointer: i32, offset: i32) -> i32
    // Briskstore(Pointer: i32, offset: i32, data: i32) -> Void
    // Brisksize() -> i32
    // Briskgrow(pages: i32) -> i32
    // _Malloc(Size: i32) -> i32
  // Math
  // Control Flow
// write a malloc in brisk, limit runtime malloc to a quarter of a page, and use brisk malloc when outside of runtime mode.
// Write Unit tests for output
// Add gc instructions
// Instead of splitting strings at codegen time split them during analysis time into brisk memory operations
// Verify The Program
// Optimize: Run constant propagation and dead code elimination, along with convert any heap values that do not need to be tagged or passed into stack values and make functions under those circumstances use local calls
// put all known variables and values into memory at innialization
// write a custom parser
// Port lexer and parser to Brisk
// let print: Function = (pointer: String): Void => {
//   fd_write(1, pointer, 8, 20);
// };
// let b: String = 'test';
// print(i32Add(b, 3));
// print(i32Add(memLoad(b, 0), -3));
// print(b);
// let printNumber: Function = (numb: Number): Void => {
//   print(memLoad(numb, 16));
// };
// let loop: Function = (body: Function, index: i32): Void => {
//   body(index);
//   // i32Add is a builtin instruction for now, but it takes (i32, i32) => i32 and a 1 would normally be a Number so i am infering the type to be i32 there
//   loop(body, i32Add(index, 1));
// };
// loop((index: i32): Void => {
//   // printNumber(index);
//   print(index);
// }, 0);
// let a: String = 'a';
// let b: String = 'b';
// let c: String = 'c';
// let d: String = 'd';
// let e: String = 'e';
// let f: String = 'f';
// let g: String = 'g';
let a: String = 'String';
print(a);
export a;