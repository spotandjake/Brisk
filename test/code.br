import print from './print.ts';
// Perform Type Checking
// Verify The Program
// Write Custom Lexer
// Optimize: Run constant propagation and dead code elimination
// Perform Module Linking
// Add gc instructions
// Convert to simple ast
// convert ast to binaryen ir
// 
// Port lsp to brisk
// Fix nearley error handler
// Make nearley use a custom lexer
// write a custom parser
// Port lexer and parser to Brisk
// Implement incremental building
// Comments
let f: String = 'test';
let main: Function = (param: Number, param2: String, param3: String): Number => {
  @disablegc
  // Test Comment
  let str: String = 'test';
  let num: Number = -1.111;
  let boolTrue: Boolean = true;
  let boolFalse: Boolean = false;
  main(f);
};
let p: Function = (): Void => print('h');
main(1);
let call: Number = main(main(1, 2));

main((): Void => {
  @disablegc
});
export main;