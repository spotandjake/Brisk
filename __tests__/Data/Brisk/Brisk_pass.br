// Import Testing
import a from 'test';
import wasm print: (String) -> Void from 'print';
import wasm f: () -> Void from 'print';
import wasm b: i32 from 'test';
import wasm return: (Any) -> Void from 'test';
// TODO: add Property access testing
// This is a comment
// if statement testing
if (1 == 1) {
  print('If Test');
} else if ('test' == 'test') {
  print('Else If Test');
} else {
  print('Else Test');
};
if (1 == 1) print('test');
else print('test');

if (true) {
  print('true');
};

// if (false) print('test');
// Type Testing
interface Test {
  field1: i32;
  field2: (i32, i32) -> i32;
  field3: i64;
};
type v = i32;

// Function Call Tests
print('test');
f();
@wasm.i32.add(1n, 1n);
// Variable Declaration tests
let c: Number = 1 + (1 + 1) + 1 + 1 + 1;
c = 1;
let d: Number = a;
// let e: Number = t.t;
let z: Function = (g: i32): i32 => {
  return(g);
};
const h: Number = 1;

// Export Tests
export h;