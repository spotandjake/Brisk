// Infix Operators
let aINFIX: i32 = 1n + 1n;
let bINFIX: i32 = 1n - 1n;
let cINFIX: i32 = 1n * 1n;
let dINFIX: i32 = 1n / 1n;
let eINFIX: i32 = 1n % 1n;
let fINFIX: i32 = 1n ^ 1n;
let gINFIX: i32 = 1n == 1n;
// Prefix Operators
let aPREFIX: i32 = +1n;
let bPREFIX: i32 = -1n;
let cPREFIX: i32 = *1n;
let dPREFIX: i32 = /1n;
let ePREFIX: i32 = %1n;
let fPREFIX: i32 = ^1n;
// Postfix Operators
let aPOSTFIX: i32 = 1n+;
let bPOSTFIX: i32 = 1n-;
let cPOSTFIX: i32 = 1n*;
let dPOSTFIX: i32 = 1n/;
let ePOSTFIX: i32 = 1n%;
let fPOSTFIX: i32 = 1n^;
// Assingment Operators
aINFIX += 1n;
bINFIX -= 1n;
cINFIX *= 1n;
dINFIX /= 1n;
eINFIX %= 1n;
fINFIX ^= 1n;

// Precedence
let aPrecedence: i32 = (1n!) + (1n!);
let bPrecedence: i32 = !1n + !1n;
let cPrecedence: i32 = !1n!;
let dPrecedence: i32 = !1n!!;
let ePrecedence: i32 = !!1n!;
let fPrecedence: i32 = +!1n;
let gPrecedence: i32 = 1n!+;
let hPrecedence: i32 = 1n + 1n ** 1n + 1n * 2n / 3n % 4n - 5n ^ 6n == 7n && 8n < 9n > 10n ? 12n;