import wasm print: (i32) => i32 from 'env';
// import wasm fd_write: (i32, i32, i32, i32) => i32 from 'wasi_snapshot_preview1';
// // Write Hello World
// const writeCharacter: Function = (let pointer: i32, character: i32): i32 => {
//   // Store Character
//   @wasm.i32.store(pointer, character);
//   // Add To The Index
//   pointer++;
//   // Return Pointer
//   return(pointer);
// };
// let pointer: i32 = 8n;
// // Write Hello World
// @wasm.i32.store(0n, 8n);
// @wasm.i32.store(4n, 12n);

// pointer = writeCharacter(pointer, 72n); // H
// pointer = writeCharacter(pointer, 101n); // e
// pointer = writeCharacter(pointer, 108n); // l
// pointer = writeCharacter(pointer, 108n); // l
// pointer = writeCharacter(pointer, 111n); // 0

// pointer = writeCharacter(pointer, 32n); //  

// pointer = writeCharacter(pointer, 87n); // W
// pointer = writeCharacter(pointer, 111n); // o
// pointer = writeCharacter(pointer, 114n); // r
// pointer = writeCharacter(pointer, 108n); // l
// pointer = writeCharacter(pointer, 100n); // d
// pointer = writeCharacter(pointer, 10n); // newline

// const loop: Function = (t: (i32) => i32, let index: i32): i32 => {
//   const test: i32 = t(index);
//   index++;
//   if (test == 1n) loop(t, index);
//   return(1n);
// };
// loop((index: i32): i32 => {
//   // Print Function
//   print(index);
//   if (index == 100n) return(0n);
//   return(1n);
// }, 0n);
export let test: i32 = 1n;