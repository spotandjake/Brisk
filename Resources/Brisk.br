if (1n == 1n) {
  const a: i32 = 1n;
};
// {
//   const a: i32 = 1n;
// };
interface Test {
  field1: i32;
  field2: (i32, i32) -> i32;
  field3: i64;
};
// type v = i32;
// type a = v;
// let a: a = 1n;
// a = 2n;
// const b: a = 1n;
// import wasm print: (String) -> Void from 'print';
// if (false) print('test');
// else print('test');
// // Import Testing
// import a from 'test';
// import wasm print: (String) -> Void from 'print';
// import wasm f: () -> Void from 'print';
// import wasm b: i32 from 'test';
// import wasm return: Number from 'test';
// // TODO: add Property access testing
// // This is a comment
// // if statement testing
// if (1 == 1) {
//   print('If Test');
// } else if ('test' == 'test') {
//   print('Else If Test');
// } else {
//   print('Else Test');
// };
// if (1 == 1) print('Test 1')
// else print('test');

// if (true) {
//   print('true');
// };

// if (false) print('test');

// // Function Call Tests
// print('test');
// f();
// @wasm.i32.add(1n, 1n);
// // Variable Declaration tests
// let c: Number = 1 + (1 + 1) + 1 + 1 + 1;
// c = 1;
// let d: Number = a;
// let t: Number = 1;
// // let e: Number = t.t;
type Func = i32;
let z: Func = (a: i32): Number => {
  @wasm.return(a);
};
z(1n);
// const h: Number = 1;

// // Export Tests
// export h;