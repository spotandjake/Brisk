//import wasm print: (String | i32 | i64 | f32 | f64 | u32 | u64 | Number) => Void from 'test1';
//import wasm print: (Any) => Void from 'test1';
let v: i32 = 2n;
// let val: Boolean = 1 < 2;
// let val1: i32 = 1n + 2n;
// let val2: Boolean = true && false;
// let val3: Boolean = !true;
// let val4: i32 = +1;
// let val5: i32 = -1;
// let val6: i32 = (1n + 1n);
let val7: i32 = @wasm.i32.add(1n, 1n);
val7 = 1n;
val7++;
//export print;
//export let value: i32 = 1n;
// export {
//   value: 1n,
//   value2: 2n,
// };
// // Enums
//enum Color {
//  Red = 0,
//  Green = 1,
//  Blue(String, i32)
//};
// enum PrimaryColor {
//   Red,
//   Green,
//   Blue,
// };
// // Ojbect Literal
// interface TestObject {
//   name: String;
//   age: i32;
// };
// let testObject: TestObject = {
//   name: 'test',
//   age: 10
// };
// let testObject1: TestObject = {
//   name: 'test',
//   age: 10,
// };
// const test: i32 = <i32>1;
// If Statements
// if (true) print('test');

// if (true) print('test');
// else print('test');

// if (true) {
//   print('test');
// } else {
//   print('test');
// };

// if (true) {
//   print('test');
// } else if (true) {
//   print('test');
// } else {
//   print('test');
// };
// if (true) {
//   print('test');
// } else print('test');

// if (true) {
//   print('test');
// };
// interface Foo {
//   field1: i32;
//   field2: (i32 | i64);
//   field3: (i32) => i32;
// };
// const test: Function = (x: i32, y: i32, z: i32): Function => {
//   print(x);
//   return((y: i32): i32 => {
//     print(y);
//     return(y);
//   });
// };
// print(((): i32 => {})());
// let mutableInt: i32 = 1n;
// mutableInt++;
// mutableInt = 2n;
// print(mutableInt);
// let mutableObject: { let mutableInt: i32; } = {
//   mutableInt: 1n
// };
// mutableObject.mutableInt++;
// mutableObject.mutableInt = 2n;
// print(mutableObject);


const test: Function = (): Number => {
    return(true);
};